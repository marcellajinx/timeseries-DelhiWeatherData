# -*- coding: utf-8 -*-
"""time-series

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FYsx7BXHuciVUst8sFpChWg965jTRr5r

Marcella Komunita Pasaribu<br>https://www.kaggle.com/mahirkukreja/delhi-weather-data
"""

import pandas as pd
import numpy as np
from keras.layers import Dense, LSTM
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import tensorflow as tf

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/My Drive/testset.csv')
df

df['datetime_utc'] = pd.to_datetime(df['datetime_utc'])
df.rename(columns={'datetime_utc':'date',' _tempm':'meantemp'}, inplace=True)
df

df.isnull().sum()

df['meantemp'].fillna(df['meantemp'].mean(), inplace=True)
df = df[['date','meantemp' ]]
df.isnull().sum()

df.set_index('date', inplace= True)
df = df.resample('d').mean()
df.isnull().sum()

df['meantemp'].fillna(df['meantemp'].mean(), inplace=True)
df.isnull().sum()

df

plt.figure(figsize=(25, 7))
plt.plot(df, linewidth=.5)
plt.grid()
plt.title("Delhi Temperature Data")
plt.xlabel('Year')
plt.ylabel('Average Temperature')
plt.show()

df.reset_index(inplace=True)
dates = df['date'].values
temp = df['meantemp'].values

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

temp_train, temp_test, y_train, y_test= train_test_split(temp, dates, test_size = 0.2, random_state = 0 , shuffle=False)

train_set = windowed_dataset(temp_train, window_size=60, batch_size=100, shuffle_buffer=1000)
test_set = windowed_dataset(temp_test, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

Mae = (df['meantemp'].max() - df['meantemp'].min()) * 10/100
print(Mae)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae') < Mae and logs.get('val_mae') < Mae):
      print("\nMAE dari model < 10% skala data")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit(train_set, epochs=100, validation_data = test_set, callbacks=[callbacks])

# plot akurasi
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Plot Akurasi')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'])
plt.show()

# plot loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Plot Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'])
plt.show()

